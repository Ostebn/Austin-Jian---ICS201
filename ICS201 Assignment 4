#------------------------------------------------
#Name: Austin Jian
#Class: ICS201-2
#Assignment #5 U4
#------------------------------------------------

#Imports the random module because it is required for the Dice Game program
import random
#Makes a function that prints out menu and asks user to input their choice
def menu():
  print("1. The House Function")
  print("2. Printing Pattern")
  print("3. The GCF Function")
  print("4. The Quadratic Solver")
  print("5. Prime Checker")
  print("6. The Dice Game")
  print("7. Quit")
  userChoice = int(input("Enter your menu choice: "))
  return userChoice

#Option 1 Function:
#Creates multiple functions to print out the house
#Creates function to print out roof
def Roof():
  print("  /\\")
  print(" /  \\")
  print("/____\\")
#Creates function to print out Base 
def Base():
  print("|    |")
  print("|____|")
#Creates function to print out walk way to the house
def Walk():
  print ("  **")
  print ("  **********")


#Option 2 Function: 
#Creates function with 2 parameters to print out rectangle
def printRectangle(rows, columns):
  #Creates nested loop to print out the rectangle
  #Creates loop to print out rows
  for numRows in range (rows):
    #Creates loop to print out columns
    for numColumns in range (columns):
      #Prints the stars
      print("*", end = " ")
    print()

#Option 3 Function:
#Creates function with 2 parameters to find the GCF
def gcf(num1, num2):
  #Creates gcf variable
  gcf = 0
  #Creates loop to find gcf
  for factor in range (1, num1):
    #Checks if the number is a common factor
    if num1%factor == 0 and num2%factor == 0:
      #Sets the gcf as the number if the number is a common factor of num1 and num2
      gcf = factor
  return gcf

  
#Option 4 Function:
#Creates a function to find all REAL roots of a quadratic equation
def quadraticSolver(a,b,c):
  #Checks if the discriminant is greater than 0. If it is greater, there are 2 real roots
  if b**2-4*a*c > 0:
    #Creates variable for the real roots
    root1 = (-b+(b**2-4*a*c)**(1/2))/(2*a)
    root2 = (-b-(b**2-4*a*c)**(1/2))/(2*a)
    #Prints out the real roots
    print (f"The real roots of this quadratic equation is {root1:.2f} and {root2:.2f}")
  #Checks if the discriminant is equal to 0. If the discriminant is equal to 0, there is 1     real root
  elif b**2-4*a*c == 0:
    #Creates variable for the real root
    root1 = -b/(2*a)
    #Prints out real root
    print(f"The only real root of this quadratic equation is {root1:.2f}")
  #Checks if the discriminant is less than 0. If this discriminant is less than 0, there are   no real roots
  elif b**2-4*a*c < 0:
    #Prints out that there are no real roots
    print ("There are no real roots for this quadratic equation")

#Option 5 Function:
#Creates a function to determine if a number is prime
def primeChecker(numb):
  #Creates a variable to check if the number is prime later on
  isPrime = True
  #Creates loop to check if the number is prime
  for numbers in range (2,numb):
    #checks if the number is prime
    if numb%numbers == 0:
      isPrime = False
      break
  #Prints out whether number is prime or not
  if isPrime:
    print ("The number is prime")
  else:
    print ("The number is not prime")
    
#Question 6 Function:
#Creates a function to play the dice game
def diceGame():
  #Creates variable to keep track of user points
  points = 1000
  while True:
    #Prints out the number of user points
    print (f"You have {points} points")
    #Asks user how maany points they want to risk
    riskPoints = int(input("Points to risk: "))
    #Stores randomly rolled dice into variable
    dice1 = random.randint(1,6)
    dice2 = random.randint(1,6)
    #Prints out roll result
    print (f"roll is {dice1} and {dice2}")
    #Uses if statements to see if user won
    if (dice1 + dice2)%2 == 0:
      print ("You lose!")
      points -= riskPoints
    else:
      print ("You win!")
      points += riskPoints*2
    #Asks user if they want to play again
    playAgain = input("Enter 'Y' if you want to play again and 'N' if you don't: ")
    print ()
    #Uses if statements to check whether or not to continue running the program
    if playAgain.upper() == "Y":
      continue
    elif playAgain.upper() == "N":
      print(f"Final score: {points}")
      break

#Creates loop to continue running the program
while True:
  #Prints out menu
  choice = menu()
  print ()
  #Uses if statements to see what the user choice was and prints out the correct function
  if choice == 1:
    Roof()
    Base()
    Walk()
    print()
  elif choice == 2:
    #asks user to input rows and columns
    row = int(input("Enter the number of rows you want: "))
    column = int(input("Enter the number of columns you want: "))
    print ()
    printRectangle(row, column)
    print()
  elif choice == 3:
    #Asks user to input the first and second number
    number1 = int(input("Enter the first number: "))
    number2 = int(input("Enter the second number: "))
    if number1<number2:
      number1, number2 = number2, number1
    print (f"The Greatest Common Factor of {number1} and {number2} is {gcf(number1,number2)}")
    print ()
  elif choice == 4:
    #Asks user to input the a,b, and c values of the quadratic
    a = eval(input("Enter the a value of the quadratic: "))
    b = eval(input("Enter the b value of the quadratic: "))
    c = eval(input("Enter the c value of the quadratic: "))
    quadraticSolver(a,b,c)
    print ()
  elif choice == 5:
    #asks user to 
    numb = int(input("Enter an integer to check if its prime: "))
    primeChecker(numb)
    print ()
  elif choice == 6:
    diceGame()
    print ()
  elif choice == 7:
    #Terminates the program if user input is 7
    print ("Thanks for using the program")
    break
  else:
    #Gives user error message if their input is invalid
    print ("Invalid choice")
    print ()
  
  
    
    
    



